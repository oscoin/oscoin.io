#!/usr/bin/env ruby

require "erb"
require "redcarpet"
require "ostruct"
require "fileutils"

$markdown = Redcarpet::Markdown.new(
  Redcarpet::Render::HTML.new,
  autolink: true,
  space_after_headers: true,
  footnotes: true
)

INDEX_TEMPLATE = File.read("templates/index.html.erb")
JOBS_TEMPLATE = File.read("templates/jobs.html.erb")
UPDATE_TEMPLATE = File.read("templates/update.html.erb")
TEAM_TEMPLATE = File.read("templates/team.html.erb")
PAGE_TEMPLATE = File.read("templates/page.html.erb")

def page!(template, name, out, src, extra)
  contents = File.read(src)
  attrs = { name: name, body: $markdown.render(contents) }
  attrs.merge!(extra || {})
  result = to_html(template, attrs)
  FileUtils.mkdir_p(File.dirname(out))
  File.new(out, "w").write(result)
end

def to_html(template, attrs)
  ERB.new(template).result(OpenStruct.new(attrs).instance_eval { binding })
end

#
# Static assets
#

FileUtils.mkdir_p("site")
[Dir.glob("**/**.html"), "css", "img"].each { |paths| FileUtils.cp_r(paths, "site") }

#
# Templated pages
#

page! INDEX_TEMPLATE, "index",      "site/index.html",         "intro.md",      {}
page! JOBS_TEMPLATE,  "jobs",       "site/jobs.html",          "jobs.md",       {}
page! JOBS_TEMPLATE,  "jobs-web",   "site/jobs/fae9b81.html",  "jobs-web.md",   {}
page! TEAM_TEMPLATE,  "team",       "site/team.html",          "team.md",       {}
page! PAGE_TEMPLATE,  "motivation", "site/motivation.html",    "motivation.md", {}
page! PAGE_TEMPLATE,  "updates",    "site/updates/index.html", "updates.md",    {}

[1, 2].each do |n|
  page! UPDATE_TEMPLATE, "update", "site/updates/#{n}.html", "updates/#{n}.md", { n: n }
end
